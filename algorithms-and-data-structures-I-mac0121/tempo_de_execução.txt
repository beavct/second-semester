Tempo de execução/ notação assintótica:

• Analisar a quantidade de operações primitivas e passos básicos:
- Operações aritméticas;
- Operações lógicas;
- Operações relacionais;
- Operações de controle; 
- Movimentação de variáveis. 

• Associado ao tamanho da entrada.

• Olhamos para o termo de maior ordem, ignorando constantes e termos de menor ordem, pois o primeiro cresce mais rápido. 

• Notação O e Ω (θ, o, ω):
DEF: f(n) = O(g(n)) se existe C e no tal que se n >= no, então f(n) <= C * g(n).
Pensamos no pior caso.
- O limita superiormente: -> pior dos casos.
  nlogn = O(n²) -> n² cresce mais que nlogn.
  logn = O(raizn) -> raízes cresce mais que logn.
  Lembrar que é menor, igual.
- Ω limita inferiormente: -> melhor dos casos.
- Θ é O e Ω ao mesmo tempo.
- Usaremos de maneira informal.

- F(n) = O(g(n)) se existe K, n0: n>=n0 => F(n) <= K * g(n).
- F(n) = Ω(g(n)) se existe j, n0: n<=n0 => F(n) >= k * g(n).
- F(n) = Θ(g(n)) se existe K  k, n0: n>=n0 => F(n) <= k * g(n) <= F(n) <= K * g(n).

• Ordenação ordenação de vetores (sort):
|–––––––––––––––––––––––––––––––––––––|
|     n²    |    nlogn    |     n     |
|–––––––––––––––––––––––––––––––––––––|
|bubble     |    merge    |   radix   | 
|insertion  |    quick*   |   bucket  |
|selection  |    heap     |  counting |
|–––––––––––––––––––––––––––––––––––––|

- insertionsort: pior caso: você quer o vetor em ordem crescente e ele entra em ordem decrescente -> tempo de execução de n².

- *quicksort no pior caso (raro) que vai levar um tempo quadrático (n²).
Algoritmo recursivo.
Pivô: você escolhe, nas aulas sempre escolheremos o último cara do vetor  
Movemos o pivô para a sua posição certa. 
Todo mundo a esquerda tem que ser menor ou igual ao pivô, e a direita todo mundo tem q ser maior (não são pedaços necessariamente ordenados).
Recursivamente escolhemos outros pivôs e fazemos o mesmo (continuando assim ordenamentos o vetor).
Dependendo dos pivôs, a partição não necessariamente vai dividir o vetor no meio cada vez (melhor caso).

- mergesort: algoritmo recursivo:
Divide até chegar em um vetor de uma célula -> logn
Vai juntando os vetores de uma células e vai as ordenando. -> compara os vetores ordenados e vai ordenando...
